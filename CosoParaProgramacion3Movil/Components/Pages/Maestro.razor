@page "/maestro"
@using CosoParaProgramacion3Movil.Models
@using CosoParaProgramacion3Movil.Services

@inject NavigationManager navigationManager
@inject UsuarioService usuarioService
@inject AuthService sesionService

<h3>Lista de Usuarios</h3>

<div class="text-center mb-3">
    <button class="btn btn-primary me-2" @onclick="Volver">Volver al Menú</button>
    <button class="btn btn-success" @onclick="CrearUsuario">Crear Usuario</button>
</div>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Imagen</th>
            <th>Nombre</th>
            <th>Rol</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (listaUsuarios is { Count: > 0 })
        {
            @foreach (var usuario in listaUsuarios)
            {
                <tr>
                    <td width="10%">
                        <img src="@usuario.Imagen" alt="Sin imagen" style="width: 100px; height: auto;" />
                    </td>
                    <td width="35%">@usuario.Name</td>
                    <td width="20%">@usuario.Role</td>
                    <td width="35%">
                        <button class="btn btn-primary me-2" @onclick="() => EditarUsuario(usuario)">
                            ✏️ Editar
                        </button>
                        <button class="btn btn-danger" @onclick="() => BorrarUsuario(usuario)">
                            🗑️ Eliminar
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No hay usuarios disponibles.</td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<Usuario> listaUsuarios = new();

    protected override async Task OnInitializedAsync()
    {
        if (await sesionService.EstaAutenticadoAsync() == false)
        {
            navigationManager.NavigateTo("/login");
            return;
        }

        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        listaUsuarios = await usuarioService.GetUsuarios();
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/");
    }

    private void CrearUsuario()
    {
        // Ir a página de creación (id = 0 indica nuevo)
        navigationManager.NavigateTo("/maestro/0");
    }

    private void EditarUsuario(Usuario usuario)
    {
        navigationManager.NavigateTo($"/maestro/{usuario.Id}");
    }

    private async Task BorrarUsuario(Usuario usuario)
    {
        if (await sesionService.EstaAutenticadoAsync() == false)
        {
            navigationManager.NavigateTo("/login");
            return;
        }

        var confirmado = await usuarioService.EliminarUsuario(usuario.Id);

        if (confirmado)
        {
            await CargarUsuarios(); // Refrescar la lista luego de eliminar
        }
        else
        {
            // Mostrar mensaje de error o alerta, si querés
        }
    }
}
